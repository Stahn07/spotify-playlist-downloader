// Generated by CoffeeScript 1.10.0
(function() {
  var Downloader, Error, EventEmitter, Log, Path, Playlist, SpotifyWeb, Success, Track, async, colors, domain, ffmetadata, fs, lodash, mkdirp, program, util,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  require('coffee-script');

  fs = require('fs');

  async = require('async');

  lodash = require('lodash');

  util = require('util');

  colors = require('colors');

  SpotifyWeb = require('spotify-web');

  mkdirp = require('mkdirp');

  Path = require('path');

  program = require('commander');

  ffmetadata = require("ffmetadata");

  domain = require('domain');

  EventEmitter = require('events').EventEmitter;

  Error = (function(_this) {
    return function(err) {
      console.log(("" + err).red);
      return process.exit(1);
    };
  })(this);

  Success = (function(_this) {
    return function(success) {
      console.log(("" + success).green);
      return process.exit(0);
    };
  })(this);

  Log = (function(_this) {
    return function(msg) {
      return console.log((" - " + msg).green);
    };
  })(this);

  Track = (function(superClass) {
    extend(Track, superClass);

    function Track(trackId, Spotify, directory, Playlist1, cb1, track1) {
      this.trackId = trackId;
      this.Spotify = Spotify;
      this.directory = directory;
      this.Playlist = Playlist1;
      this.cb = cb1;
      this.track = track1 != null ? track1 : {};
      this.getFileProperties = bind(this.getFileProperties, this);
      this.writeMetaData = bind(this.writeMetaData, this);
      this.downloadFile = bind(this.downloadFile, this);
      this.createDirs = bind(this.createDirs, this);
      this.getTrack = bind(this.getTrack, this);
      this.file = {};
      this.getTrack();
    }

    Track.prototype.getTrack = function() {
      return this.Spotify.get(this.trackId, (function(_this) {
        return function(err, track) {
          if (err) {
            return _this.cb(err);
          }
          _this.track = track;
          return _this.createDirs();
        };
      })(this));
    };

    Track.prototype.createDirs = function() {
      var albumpath, artistpath, dir, filepath, stats;
      dir = Path.resolve("" + this.directory);
      artistpath = dir + '/' + this.track.artist[0].name.replace(/\//g, ' - ') + '/';
      albumpath = artistpath + this.track.album.name.replace(/\//g, ' - ') + ' [' + this.track.album.date.year + ']/';
      filepath = albumpath + this.track.artist[0].name.replace(/\//g, ' - ') + ' - ' + this.track.name.replace(/\//g, ' - ') + '.mp3';
      this.file.name = this.track.name.replace(/\//g, ' - ');
      this.file.path = filepath;
      console.log(this.file);
      this.Playlist.addTrackToPlaylist(this.file);
      if (fs.existsSync(filepath)) {
        stats = fs.statSync(filepath);
        if (stats.size !== 0) {
          console.log(("Already Downloaded: " + this.track.artist[0].name + " " + this.track.name).yellow);
          return this.cb();
        }
      }
      if (!fs.existsSync(albumpath)) {
        mkdirp.sync(albumpath);
      }
      return this.downloadFile(filepath);
    };

    Track.prototype.downloadFile = function(filepath) {
      var d, out;
      Log("Downloading: " + this.track.artist[0].name + " - " + this.track.name);
      out = fs.createWriteStream(filepath);
      d = domain.create();
      d.on('error', (function(_this) {
        return function(err) {
          console.log((" - - " + (err.toString()) + " ...  { Skipping Track }").red);
          return _this.cb();
        };
      })(this));
      return d.run((function(_this) {
        return function() {
          return _this.track.play().pipe(out).on('finish', function() {
            Log(" - DONE: " + _this.track.artist[0].name + " - " + _this.track.name);
            return _this.writeMetaData(filepath);
          });
        };
      })(this));
    };

    Track.prototype.writeMetaData = function(filepath) {
      var id3;
      id3 = {
        artist: this.track.artist[0].name,
        album: this.track.album.name,
        title: this.track.name,
        date: this.track.album.date.year,
        track: this.track.number
      };
      return ffmetadata.write(filepath, id3, this.cb);
    };

    Track.prototype.getFileProperties = function() {
      return this.file;
    };

    return Track;

  })(EventEmitter);

  Downloader = (function(superClass) {
    extend(Downloader, superClass);

    function Downloader(username, password, playlist, directory) {
      this.username = username;
      this.password = password;
      this.playlist = playlist;
      this.directory = directory;
      this.processTrack = bind(this.processTrack, this);
      this.processTracks = bind(this.processTracks, this);
      this.getPlaylist = bind(this.getPlaylist, this);
      this.attemptLogin = bind(this.attemptLogin, this);
      this.run = bind(this.run, this);
      this.Spotify = null;
      this.Tracks = [];
      this.dir = this.directory;
      this.makeFolder = false;
      this.generatePlaylist = false;
      this.Playlist = new Playlist();
    }

    Downloader.prototype.run = function() {
      console.log('Downloader App Started..'.green);
      if (this.generatePlaylist) {
        this.Playlist.enabled = true;
      }
      return async.series([this.attemptLogin, this.getPlaylist, this.processTracks], (function(_this) {
        return function(err, res) {
          if (err) {
            return Error("" + (err.toString()));
          }
          return Success(' ------- DONE ALL ------- ');
        };
      })(this));
    };

    Downloader.prototype.attemptLogin = function(cb) {
      return SpotifyWeb.login(this.username, this.password, (function(_this) {
        return function(err, SpotifyInstance) {
          if (err) {
            return Error("Error logging in... (" + err + ")");
          }
          _this.Spotify = SpotifyInstance;
          return typeof cb === "function" ? cb() : void 0;
        };
      })(this));
    };

    Downloader.prototype.getPlaylist = function(cb) {
      Log('Getting Playlist Data');
      return this.Spotify.playlist(this.playlist, (function(_this) {
        return function(err, playlistData) {
          if (err) {
            return Error("Playlist data error... " + err);
          }
          Log("Got Playlist: " + playlistData.attributes.name);
          if (_this.folder) {
            _this.dir = _this.directory + playlistData.attributes.name.replace(/\//g, ' - ') + '/';
          }
          _this.Playlist.directory = _this.directory;
          _this.Playlist.name = playlistData.attributes.name;
          _this.Tracks = lodash.map(playlistData.contents.items, function(item) {
            return item.uri;
          });
          return typeof cb === "function" ? cb() : void 0;
        };
      })(this));
    };

    Downloader.prototype.processTracks = function(cb) {
      Log("Processing " + this.Tracks.length + " Tracks");
      return async.mapSeries(this.Tracks, this.processTrack, cb);
    };

    Downloader.prototype.processTrack = function(track, cb) {
      var TempInstance;
      return TempInstance = new Track(track, this.Spotify, this.dir, this.Playlist, cb);
    };

    return Downloader;

  })(EventEmitter);

  Playlist = (function(superClass) {
    extend(Playlist, superClass);

    function Playlist() {
      this.addTrackToPlaylist = bind(this.addTrackToPlaylist, this);
      this.enabled = false;
      this.directory = null;
      this.name = null;
      this.playlistFile = null;
      this.traks = [];
    }

    Playlist.prototype.addTrackToPlaylist = function(file, cb) {
      var playlistFile, relativePath, track;
      if (!this.enabled) {
        return;
      }
      track = file.path;
      playlistFile = this.name.replace(/\//g, ' - ') + '.m3u';
      if (track.indexOf(this.directory) !== -1) {
        relativePath = track.slice(track.indexOf(this.directory), track.length);
      }
      fs.appendFile(playlistFile, relativePath + "\n", (function(_this) {
        return function(err) {
          if (err) {
            throw err;
          }
          return console.log('The "data to append" was appended to file!');
        };
      })(this));
      return typeof cb === "function" ? cb() : void 0;
    };

    return Playlist;

  })(EventEmitter);

  module.exports = Downloader;

}).call(this);

//# sourceMappingURL=downloader.js.map
