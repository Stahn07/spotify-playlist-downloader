// Generated by CoffeeScript 1.10.0
(function() {
  var Downloader, Error, EventEmitter, ListProperties, Log, Path, Playlist, SpotifyWeb, Success, Track, async, colors, domain, fs, id3, lodash, mkdirp,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  require('coffee-script');

  fs = require('fs');

  async = require('async');

  lodash = require('lodash');

  colors = require('colors');

  SpotifyWeb = require('spotify-web');

  mkdirp = require('mkdirp');

  Path = require('path');

  id3 = require("node-id3");

  domain = require('domain');

  Playlist = require('./playlist');

  Track = require('./track');

  EventEmitter = require('events').EventEmitter;

  Error = (function(_this) {
    return function(err) {
      console.log(("" + err).red);
      return process.exit(1);
    };
  })(this);

  Success = (function(_this) {
    return function(success) {
      console.log(("" + success).green);
      return process.exit(0);
    };
  })(this);

  Log = (function(_this) {
    return function(msg) {
      if (typeof msg === 'undefined') {
        return;
      }
      return console.log((" - " + msg).green);
    };
  })(this);

  ListProperties = (function(_this) {
    return function(object) {
      var properties;
      properties = Object.keys(object);
      return Log(properties);
    };
  })(this);

  Downloader = (function(superClass) {
    extend(Downloader, superClass);

    function Downloader(username, password) {
      this.username = username;
      this.password = password;
      this.processTrack = bind(this.processTrack, this);
      this.processTrackUrls = bind(this.processTrackUrls, this);
      this.loadAlbum = bind(this.loadAlbum, this);
      this.loadPlaylist = bind(this.loadPlaylist, this);
      this.loadSpotifyItem = bind(this.loadSpotifyItem, this);
      this.login = bind(this.login, this);
      this.run = bind(this.run, this);
      this.setGeneratePlaylist = bind(this.setGeneratePlaylist, this);
      this.setMakeFolder = bind(this.setMakeFolder, this);
      this.setPlaylistPath = bind(this.setPlaylistPath, this);
      this.setBasePath = bind(this.setBasePath, this);
      this.setPlaylist = bind(this.setPlaylist, this);
      this.Spotify = null;
      this.trackUrls = [];
      this.basePath = null;
      this.playlistPath = null;
      this.makeFolder = false;
      this.generatePlaylist = false;
      this.Playlist = new Playlist();
      this.Track = new Track();
      this.Track.setPlaylist(this.Playlist);
    }

    Downloader.prototype.setPlaylist = function(playlist) {
      this.playlist = playlist;
    };

    Downloader.prototype.setBasePath = function(basePath) {
      this.basePath = basePath;
      return this.setPlaylistPath(this.basePath);
    };

    Downloader.prototype.setPlaylistPath = function(playlistPath) {
      this.playlistPath = playlistPath;
    };

    Downloader.prototype.setMakeFolder = function(makeFolder) {
      this.makeFolder = makeFolder;
    };

    Downloader.prototype.setGeneratePlaylist = function(generatePlaylist) {
      this.generatePlaylist = generatePlaylist;
      return this.Playlist.setEnabled(true);
    };

    Downloader.prototype.run = function() {
      Log('Downloader App Started..'.green);
      return async.series([this.login, this.loadSpotifyItem, this.processTrackUrls], (function(_this) {
        return function(err, res) {
          if (err) {
            Log("" + (res.toString()));
            return Error("" + (err.toString()));
          }
          return Success(' ------- DONE ALL ------- ');
        };
      })(this));
    };

    Downloader.prototype.login = function(callback) {
      Log('Downloader.login '.green);
      return SpotifyWeb.login(this.username, this.password, (function(_this) {
        return function(err, SpotifyInstance) {
          if (err) {
            return Error("Error logging in... (" + err + ")");
          }
          Log('Downloader.login ok'.green);
          _this.Spotify = SpotifyInstance;
          _this.Track.setSpotify(_this.Spotify);
          return typeof callback === "function" ? callback() : void 0;
        };
      })(this));
    };

    Downloader.prototype.loadSpotifyItem = function(callback) {
      if (this.playlist.indexOf('album') !== -1) {
        return this.loadAlbum(callback);
      } else {
        return this.loadPlaylist(callback);
      }
    };

    Downloader.prototype.loadPlaylist = function(callback) {
      Log('Getting Playlist Data');
      return this.Spotify.playlist(this.playlist, 0, 9001, (function(_this) {
        return function(err, playlistData) {
          if (err) {
            return Error("Playlist data error... " + err);
          }
          Log("Got Playlist: " + playlistData.attributes.name);
          _this.Playlist.setName(playlistData.attributes.name);
          if (_this.makeFolder) {
            _this.playlistPath = _this.basePath + '/' + playlistData.attributes.name.replace(/\//g, ' - ') + '/';
            _this.Track.setDirectory(_this.playlistPath);
          }
          _this.Playlist.directory = _this.basePath;
          _this.Playlist.name = playlistData.attributes.name;
          _this.trackUrls = lodash.map(playlistData.contents.items, function(item) {
            return item.uri;
          });
          return typeof callback === "function" ? callback() : void 0;
        };
      })(this));
    };

    Downloader.prototype.loadAlbum = function(callback) {
      Log('Getting Album Data');
      return this.Spotify.get(this.playlist, (function(_this) {
        return function(err, album) {
          var tracks;
          if (err) {
            return Error("Album data error... " + err);
          }
          Log("Got Album: " + album.name);
          Log("" + album);
          tracks = [];
          album.disc.forEach(function(disc) {
            if (Array.isArray(disc.track)) {
              return tracks.push.apply(tracks, disc.track);
            }
          });
          _this.trackUrls = lodash.map(tracks, function(track) {
            return track.uri;
          });
          _this.Playlist.setName(album.name);
          if (_this.makeFolder) {
            _this.playlistPath = _this.basePath + '/' + album.name.replace(/\//g, ' - ') + '/';
            _this.Track.setDirectory(_this.playlistPath);
          }
          _this.Playlist.directory = _this.basePath;
          _this.Playlist.name = album.name;
          return typeof callback === "function" ? callback() : void 0;
        };
      })(this));
    };

    Downloader.prototype.processTrackUrls = function(callback) {
      Log("Processing " + this.trackUrls.length + " Tracks");
      return async.mapSeries(this.trackUrls, this.processTrack, callback);
    };

    Downloader.prototype.processTrack = function(trackUrl, callback) {
      Log('Downloader.processTrack '.green);
      return this.Track.process(trackUrl, callback);
    };

    return Downloader;

  })(EventEmitter);

  module.exports = Downloader;

}).call(this);

//# sourceMappingURL=downloader.js.map
