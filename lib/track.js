// Generated by CoffeeScript 1.10.0
(function() {
  var Error, EventEmitter, Log, Path, Success, Track, async, colors, domain, fs, id3, lodash, mkdirp,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  require('coffee-script');

  fs = require('fs');

  async = require('async');

  lodash = require('lodash');

  colors = require('colors');

  mkdirp = require('mkdirp');

  Path = require('path');

  id3 = require("node-id3");

  domain = require('domain');

  EventEmitter = require('events').EventEmitter;

  Error = (function(_this) {
    return function(err) {
      console.log(("" + err).red);
      return process.exit(1);
    };
  })(this);

  Success = (function(_this) {
    return function(success) {
      console.log(("" + success).green);
      return process.exit(0);
    };
  })(this);

  Log = (function(_this) {
    return function(msg) {
      return console.log((" - " + msg).green);
    };
  })(this);

  Track = (function(superClass) {
    extend(Track, superClass);

    function Track(trackId, Spotify, directory, Playlist, cb, track1) {
      this.trackId = trackId;
      this.Spotify = Spotify;
      this.directory = directory;
      this.Playlist = Playlist;
      this.cb = cb;
      this.track = track1 != null ? track1 : {};
      this.getFileProperties = bind(this.getFileProperties, this);
      this.writeMetaData = bind(this.writeMetaData, this);
      this.downloadFile = bind(this.downloadFile, this);
      this.createDirs = bind(this.createDirs, this);
      this.process = bind(this.process, this);
      this.reset = bind(this.reset, this);
      this.setDirectory = bind(this.setDirectory, this);
      this.setPlaylist = bind(this.setPlaylist, this);
      this.setSpotify = bind(this.setSpotify, this);
      this.Spotify = null;
      this.Playlist = null;
      this.directory = null;
      this.track = null;
      this.file = {};
      this.retryCounter = 0;
    }

    Track.prototype.setSpotify = function(Spotify) {
      this.Spotify = Spotify;
    };

    Track.prototype.setPlaylist = function(Playlist) {
      this.Playlist = Playlist;
    };

    Track.prototype.setDirectory = function(directory) {
      this.directory = directory;
    };

    Track.prototype.reset = function() {
      return this.track = null;
    };

    Track.prototype.process = function(trackId, callback) {
      this.trackId = trackId;
      this.callback = callback;
      return this.Spotify.get(this.trackId, (function(_this) {
        return function(err, track) {
          if (err) {
            return _this.callback(err);
          }
          _this.track = track;
          return _this.createDirs();
        };
      })(this));
    };

    Track.prototype.createDirs = function() {
      var albumPath, artistPath, dir, filePath, stats;
      dir = Path.resolve("" + this.directory);
      artistPath = dir + '/' + this.track.artist[0].name.replace(/\//g, ' - ') + '/';
      albumPath = artistPath + this.track.album.name.replace(/\//g, ' - ') + ' [' + this.track.album.date.year + ']/';
      filePath = albumPath + this.track.artist[0].name.replace(/\//g, ' - ') + ' - ' + this.track.name.replace(/\//g, ' - ') + '.mp3';
      this.file.name = this.track.name.replace(/\//g, ' - ');
      this.file.path = filePath;
      this.Playlist.addTrackToPlaylist(this.file);
      if (fs.existsSync(filePath)) {
        stats = fs.statSync(filePath);
        if (stats.size !== 0) {
          Log(("Already Downloaded: " + this.track.artist[0].name + " " + this.track.name).yellow);
          return this.callback();
        }
      }
      if (!fs.existsSync(albumPath)) {
        mkdirp.sync(albumPath);
      }
      return this.downloadFile(filePath);
    };

    Track.prototype.downloadFile = function(filePath) {
      var d;
      Log("Downloading: " + this.track.artist[0].name + " - " + this.track.name);
      d = domain.create();
      d.on('error', (function(_this) {
        return function(err) {
          Log(" Error received " + (err.toString()).red);
          if (err.toString().indexOf("Rate limited") > -1) {
            Log(" - - " + (err.toString()) + " ...  { Retrying in 10 seconds }".yellow);
            if (_this.retryCounter < 2) {
              _this.retryCounter++;
              return setTimeout(_this.downloadFile(filePath), 1000);
            } else {
              return _this.callback();
            }
          } else {
            return _this.callback();
          }
        };
      })(this));
      return d.run((function(_this) {
        return function() {
          var error, error1, out;
          out = fs.createWriteStream(filePath);
          try {
            return _this.track.play().pipe(out).on('finish', function() {
              Log(" - DONE: " + _this.track.artist[0].name + " - " + _this.track.name);
              return _this.writeMetaData(filePath);
            });
          } catch (error1) {
            error = error1;
            Log(("Error " + error + " on download track  " + _this.track.artist[0].name + " ...").red);
            return typeof _this.callback === "function" ? _this.callback() : void 0;
          }
        };
      })(this));
    };

    Track.prototype.writeMetaData = function(filePath) {
      var meta;
      meta = {
        artist: this.track.artist[0].name,
        album: this.track.album.name,
        title: this.track.name,
        year: this.track.album.date.year,
        track: this.track.number
      };
      id3.write(meta, filePath);
      return typeof this.callback === "function" ? this.callback() : void 0;
    };

    Track.prototype.getFileProperties = function() {
      return this.file;
    };

    return Track;

  })(EventEmitter);

  module.exports = Track;

}).call(this);

//# sourceMappingURL=track.js.map
